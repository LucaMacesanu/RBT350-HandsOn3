import cv2
import numpy
import math
from enum import Enum

class GripPipeline:
    """
    An OpenCV pipeline generated by GRIP.
    """
    
    def __init__(self):
        """initializes all values to presets or None if need to be set
        """

        self.__normalize_type = cv2.NORM_MINMAX
        self.__normalize_alpha = 100.0
        self.__normalize_beta = 200.0

        self.normalize_output = None

        self.__blur_0_input = self.normalize_output
        self.__blur_0_type = BlurType.Gaussian_Blur
        self.__blur_0_radius = 2.702702702702702

        self.blur_0_output = None

        self.__hsl_threshold_input = self.blur_0_output
        self.__hsl_threshold_hue = [0.0, 180.0]
        self.__hsl_threshold_saturation = [38.98381294964029, 255.0]
        self.__hsl_threshold_luminance = [121.53776978417265, 255.0]

        self.hsl_threshold_output = None

        self.__blur_1_input = self.hsl_threshold_output
        self.__blur_1_type = BlurType.Median_Filter
        self.__blur_1_radius = 0.0

        self.blur_1_output = None

        self.__find_blobs_input = self.blur_1_output
        self.__find_blobs_min_area = 20.0
        self.__find_blobs_circularity = [0.4226618705035971, 1.0]
        self.__find_blobs_dark_blobs = False

        self.find_blobs_output = None


    def process(self, source0):
        """
        Runs the pipeline and sets all outputs to new values.
        """
        # Step Normalize0:
        self.__normalize_input = source0
        (self.normalize_output) = self.__normalize(self.__normalize_input, self.__normalize_type, self.__normalize_alpha, self.__normalize_beta)

        # Step Blur0:
        self.__blur_0_input = self.normalize_output
        (self.blur_0_output) = self.__blur(self.__blur_0_input, self.__blur_0_type, self.__blur_0_radius)

        # Step HSL_Threshold0:
        self.__hsl_threshold_input = self.blur_0_output
        (self.hsl_threshold_output) = self.__hsl_threshold(self.__hsl_threshold_input, self.__hsl_threshold_hue, self.__hsl_threshold_saturation, self.__hsl_threshold_luminance)

        # Step Blur1:
        self.__blur_1_input = self.hsl_threshold_output
        (self.blur_1_output) = self.__blur(self.__blur_1_input, self.__blur_1_type, self.__blur_1_radius)

        # Step Find_Blobs0:
        self.__find_blobs_input = self.blur_1_output
        (self.find_blobs_output) = self.__find_blobs(self.__find_blobs_input, self.__find_blobs_min_area, self.__find_blobs_circularity, self.__find_blobs_dark_blobs)
        if len(self.find_blobs_output) > 0:
            return self.find_blobs_output[0].pt
        return None

    @staticmethod
    def __normalize(input, type, a, b):
        """Normalizes or remaps the values of pixels in an image.
        Args:
            input: A numpy.ndarray.
            type: Opencv enum.
            a: The minimum value.
            b: The maximum value.
        Returns:
            A numpy.ndarray of the same type as the input.
        """
        return cv2.normalize(input, None, a, b, type)

    @staticmethod
    def __hsl_threshold(input, hue, sat, lum):
        """Segment an image based on hue, saturation, and luminance ranges.
        Args:
            input: A BGR numpy.ndarray.
            hue: A list of two numbers the are the min and max hue.
            sat: A list of two numbers the are the min and max saturation.
            lum: A list of two numbers the are the min and max luminance.
        Returns:
            A black and white numpy.ndarray.
        """
        out = cv2.cvtColor(input, cv2.COLOR_BGR2HLS)
        return cv2.inRange(out, (hue[0], lum[0], sat[0]),  (hue[1], lum[1], sat[1]))

    @staticmethod
    def __blur(src, type, radius):
        """Softens an image using one of several filters.
        Args:
            src: The source mat (numpy.ndarray).
            type: The blurType to perform represented as an int.
            radius: The radius for the blur as a float.
        Returns:
            A numpy.ndarray that has been blurred.
        """
        if(type is BlurType.Box_Blur):
            ksize = int(2 * round(radius) + 1)
            return cv2.blur(src, (ksize, ksize))
        elif(type is BlurType.Gaussian_Blur):
            ksize = int(6 * round(radius) + 1)
            return cv2.GaussianBlur(src, (ksize, ksize), round(radius))
        elif(type is BlurType.Median_Filter):
            ksize = int(2 * round(radius) + 1)
            return cv2.medianBlur(src, ksize)
        else:
            return cv2.bilateralFilter(src, -1, round(radius), round(radius))

    @staticmethod
    def __find_blobs(input, min_area, circularity, dark_blobs):
        """Detects groups of pixels in an image.
        Args:
            input: A numpy.ndarray.
            min_area: The minimum blob size to be found.
            circularity: The min and max circularity as a list of two numbers.
            dark_blobs: A boolean. If true looks for black. Otherwise it looks for white.
        Returns:
            A list of KeyPoint.
        """
        params = cv2.SimpleBlobDetector_Params()
        params.filterByColor = 1
        params.blobColor = (0 if dark_blobs else 255)
        params.minThreshold = 10
        params.maxThreshold = 220
        params.filterByArea = True
        params.minArea = min_area
        params.filterByCircularity = True
        params.minCircularity = circularity[0]
        params.maxCircularity = circularity[1]
        params.filterByConvexity = False
        params.filterByInertia = False
        detector = cv2.SimpleBlobDetector_create(params)
        return detector.detect(input)


BlurType = Enum('BlurType', 'Box_Blur Gaussian_Blur Median_Filter Bilateral_Filter')
if __name__ == "__main__":
    video = cv2.VideoCapture(0)
    grip = GripPipeline()
    keyPoint = None
    while(True):
        ret, img = video.read()
        processed = grip.process(img)
        # print(grip.find_blobs_output)
        if processed is not None:
            print(processed)
        

        cv2.imshow('frame', grip.hsl_threshold_output)
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

